// Generated by CoffeeScript 1.6.3
(function() {
  this.RingerPart = (function() {
    function RingerPart(_opts) {
      this.options = _opts;
      this.two = this.options.two;
      this._init();
    }

    RingerPart.prototype._init = function() {
      return this.polygon = this._initPolygon();
    };

    RingerPart.prototype._radius = function() {
      return this.options.radius || _.min([this.two.width, this.two.height]) / 2;
    };

    RingerPart.prototype._angle = function() {
      return this.options.angle || Math.PI / 4;
    };

    RingerPart.prototype._thickness = function() {
      return this.options.thickness || 30;
    };

    RingerPart.prototype._color = function() {
      return this.options.color || '#FF0000';
    };

    RingerPart.prototype._group = function() {
      if (this.group) {
        return this.group;
      }
      this.group = this.two.makeGroup();
      this.group.translation.set(this.two.width / 2, this.two.height / 2);
      return this.group;
    };

    RingerPart.prototype._initPolygon = function() {
      var amount, angle, inner_points, last, outer_points, polygon, radius, rotation;
      rotation = this.options.rotation;
      amount = 50;
      last = amount - 1;
      radius = this._radius();
      angle = this._angle();
      inner_points = _.map(_.range(0, angle, angle / amount), function(theta) {
        var x, y;
        x = radius * Math.cos(theta);
        y = radius * Math.sin(theta);
        return new Two.Anchor(x, y);
      });
      radius += this._thickness();
      outer_points = _.map(_.range(angle, 0, -angle / amount), function(theta) {
        var x, y;
        x = radius * Math.cos(theta);
        y = radius * Math.sin(theta);
        return new Two.Anchor(x, y);
      });
      polygon = new Two.Polygon(_.union(inner_points, outer_points), true, false);
      polygon.rotation = rotation;
      polygon.fill = this._color();
      return polygon.addTo(this._group());
    };

    return RingerPart;

  })();

  this.Ringer = (function() {
    function Ringer(_opts) {
      this.options = _opts;
      this.two = this.options.two;
      this._init();
    }

    Ringer.prototype._amount = function() {
      return this.options.amount || 10;
    };

    Ringer.prototype._minAngle = function() {
      return this.options.minAngle || (Math.PI / 10);
    };

    Ringer.prototype._maxAngle = function() {
      return this.options.maxAngle || (Math.PI / 4);
    };

    Ringer.prototype._minRadius = function() {
      return this.options.minRadius || 10;
    };

    Ringer.prototype._maxRadius = function() {
      return this.options.maxRadius || _.min([this.two.width, this.two.height]);
    };

    Ringer.prototype._minThickness = function() {
      return this.options.minThickness || 10;
    };

    Ringer.prototype._maxThickness = function() {
      return this.options.maxThickness || 30;
    };

    Ringer.prototype._colors = function() {
      return this.options.colors || ['#E3D253', '#F59A54', '#F12648', '#EE2756'];
    };

    Ringer.prototype._init = function() {
      var _this = this;
      return this.ringer_parts = _.map(_.range(this._amount()), function(i) {
        var a, rot;
        a = _this._minAngle() + Math.random() * (_this._maxAngle() - _this._minAngle());
        rot = Math.random() * Math.PI * 2;
        return new RingerPart({
          two: _this.two,
          radius: _this._minRadius() + Math.random() * (_this._maxRadius() - _this._minRadius()),
          angle: a,
          thickness: _this._minThickness() + Math.random() * (_this._maxThickness() - _this._minThickness()),
          rotation: rot,
          color: _.sample(_this._colors())
        });
      });
    };

    return Ringer;

  })();

  this.RingerOperations = (function() {
    function RingerOperations(opts) {
      this.options = opts;
    }

    RingerOperations.prototype.target = function() {
      return this.options.target || this.options.ringer;
    };

    RingerOperations.prototype.rotate = function(speed, divergence) {
      var duration, rotations;
      if (speed === void 0) {
        speed = 1;
      }
      if (divergence === void 0) {
        divergence = 1000;
      }
      rotations = 10000;
      duration = 10000 * rotations / speed;
      return this.rotation_tweens = _.map(this.target().ringer_parts, function(rp) {
        var rot;
        rot = rp.group.rotation + Math.PI * 2 * rotations;
        if (Math.random() > 0.5) {
          rot = -rot;
        }
        return new TWEEN.Tween(rp.group).to({
          rotation: rot
        }, duration - Math.random() * divergence * 40000).easing(TWEEN.Easing.Linear.None).start();
      });
    };

    RingerOperations.prototype.scale = function() {
      return this.scale_tweens = _.map(this.target().ringer_parts, function(rp) {
        var scale1, scale2;
        scale1 = rp.group.scale * 0.7;
        scale2 = rp.group.scale;
        return new TWEEN.Tween(rp.group).to({
          scale: scale1
        }, 1000).easing(TWEEN.Easing.Exponential.Out).start().onComplete(function() {
          return new TWEEN.Tween(rp.group).to({
            scale: scale2
          }, 1000).easing(TWEEN.Easing.Exponential.Out).delay(1000).start();
        });
      });
    };

    return RingerOperations;

  })();

}).call(this);
