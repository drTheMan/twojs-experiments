// Generated by CoffeeScript 1.6.3
(function() {
  var PerspectiveSquare, Triad, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Triad = (function() {
    function Triad(_opts) {
      this.options = _opts;
      this._init();
    }

    Triad.prototype._init = function() {
      return this.polygon = this._createPolygon();
    };

    Triad.prototype._sideLength = function() {
      return this.options.sideLength || 50;
    };

    Triad.prototype._halfSide = function() {
      return this._sideLength() / 2;
    };

    Triad.prototype._centerLength = function() {
      return this.__centerLength || (this.__centerLength = Math.sqrt(Math.pow(this._sideLength(), 2) - Math.pow(this._halfSide(), 2)));
    };

    Triad.prototype._createPolygon = function() {
      return new Two.Polygon(this.anchors(), true, false);
    };

    Triad.prototype.anchor1 = function() {
      return new Two.Anchor(0, 0);
    };

    Triad.prototype.anchor2 = function() {
      return new Two.Anchor(this._halfSide(), this._centerLength());
    };

    Triad.prototype.anchor3 = function() {
      return new Two.Anchor(-this._halfSide(), this._centerLength());
    };

    Triad.prototype.anchors = function() {
      return [this.anchor1(), this.anchor2(), this.anchor3()];
    };

    return Triad;

  })();

  PerspectiveSquare = (function(_super) {
    __extends(PerspectiveSquare, _super);

    function PerspectiveSquare() {
      _ref = PerspectiveSquare.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PerspectiveSquare.prototype._createPolygon = function() {
      return new Two.Polygon(this.anchors(), true, false);
    };

    PerspectiveSquare.prototype.anchor4 = function() {
      return new Two.Anchor(-this._sideLength(), 0);
    };

    PerspectiveSquare.prototype.anchors = function() {
      return [this.anchor1(), this.anchor2(), this.anchor3(), this.anchor4()];
    };

    return PerspectiveSquare;

  })(Triad);

  this.TriGrid = (function() {
    function TriGrid(_opts) {
      this.options = _opts;
      this.two = this.options.two;
      this._init();
    }

    TriGrid.prototype._group = function() {
      if (this.group) {
        return this.group;
      }
      this.group = this.two.makeGroup();
      this.group.translation.set(0, 0);
      return this.group;
    };

    TriGrid.prototype._sideLength = function() {
      return this.options.sideLength || 50;
    };

    TriGrid.prototype._halfSide = function() {
      return this._sideLength() / 2;
    };

    TriGrid.prototype._centerLength = function() {
      return this.__centerLength || (this.__centerLength = Math.sqrt(Math.pow(this._sideLength(), 2) - Math.pow(this._halfSide(), 2)));
    };

    TriGrid.prototype._rows = function() {
      return this.options.rows || this.two.height / this._centerLength();
    };

    TriGrid.prototype._cols = function() {
      return this.options.cols || this.two.width / this._sideLength();
    };

    TriGrid.prototype._stroke = function() {
      return this.options.stroke || '#555555';
    };

    TriGrid.prototype._init = function() {
      var _this = this;
      _.each(this.createEveryOtherTriad(), function(t) {
        return t.polygon.addTo(_this._group());
      });
      this._group().noFill();
      this._group().stroke = this._stroke();
      return this._group().lineWidth = 2;
    };

    TriGrid.prototype.createEveryOtherTriad = function() {
      var _this = this;
      return _.flatten(_.map(_.range(this._rows()), function(ri) {
        return _.map(_.range(_this._cols()), function(ci) {
          var t, x, y;
          x = ci * _this._sideLength();
          if (ri % 2 === 1) {
            x += _this._sideLength() / 2;
          }
          y = ri * _this._centerLength();
          t = new Triad({
            sideLength: _this._sideLength()
          });
          t.polygon.translation.set(x, y);
          return t;
        });
      }));
    };

    TriGrid.prototype.squarePolygon = function(x, y, w, h) {
      var ps;
      ps = new PerspectiveSquare({
        sideLength: this._sideLength()
      });
      ps.polygon.noFill();
      ps.polygon.stroke = this._stroke();
      return ps.polygon;
    };

    return TriGrid;

  })();

  this.TriGridOps = (function() {
    function TriGridOps(_opts) {
      this.options = _opts;
      this.target = this.options.target || this.options.tri_grid || this.options.trigrid || new TriGrid({
        two: this.options.two
      });
      this.lonelyTravelerTween(10).delay(50).start();
    }

    TriGridOps.prototype.lonelyTravelerTween = function(row, duration) {
      var p,
        _this = this;
      p = this.target.squarePolygon();
      p.translation.set(-10, this.target._centerLength() * row);
      p.addTo(this.target._group());
      if (duration === void 0) {
        duration = 10000;
      }
      return new TWEEN.Tween(p.translation).to({
        x: this.target.two.width + 100
      }, duration).easing(TWEEN.Easing.Linear.None).onComplete(function() {
        console.log('lonely traveler completed');
        return _this.target.two.remove(p);
      });
    };

    return TriGridOps;

  })();

}).call(this);
