// Generated by CoffeeScript 1.6.3
(function() {
  this.CircleCloser = (function() {
    function CircleCloser(_opts) {
      this.options = _opts;
      this.two = this.options.two;
      this._init();
    }

    CircleCloser.prototype._radius = function() {
      return this.options.radius || _.min([this.two.width, this.two.height]) / 2;
    };

    CircleCloser.prototype._closerWidth = function() {
      return Math.sqrt(Math.pow(this.two.width, 2), Math.pow(this.two.height, 2)) * 1.5;
    };

    CircleCloser.prototype._closerLength = function() {
      return this._closerWidth() / 2;
    };

    CircleCloser.prototype._group = function() {
      if (this.group) {
        return this.group;
      }
      this.group = this.two.makeGroup();
      this.group.translation.set(this.two.width / 2, this.two.height / 2);
      return this.group;
    };

    CircleCloser.prototype._init = function() {
      this.polygon1 = this._initPolygon();
      this.polygon2 = this._initPolygon(Math.PI);
      this._group().fill = this.options.color || '#000000';
      return this._group().noStroke();
    };

    CircleCloser.prototype._initPolygon = function(rotation) {
      var amount, last, points, polygon, radius;
      if (rotation === void 0) {
        rotation = 0;
      }
      amount = 25;
      last = amount - 1;
      radius = this._radius();
      points = _.map(_.range(amount), function(i) {
        var pct, theta, x, y;
        pct = i / last;
        theta = pct * Math.PI;
        x = radius * Math.cos(theta);
        y = radius * Math.sin(theta);
        return new Two.Anchor(x, y);
      });
      last = _.last(points);
      points.push(new Two.Anchor(last.x + radius - this._closerWidth() / 2, last.y));
      last = _.last(points);
      points.push(new Two.Anchor(last.x, last.y + this._closerLength()));
      last = _.last(points);
      points.push(new Two.Anchor(last.x + this._closerWidth(), last.y));
      last = _.last(points);
      points.push(new Two.Anchor(last.x, last.y - this._closerLength()));
      polygon = new Two.Polygon(points, false, false);
      polygon.rotation = rotation;
      return polygon.addTo(this._group());
    };

    return CircleCloser;

  })();

  this.CircleCloserOperations = (function() {
    function CircleCloserOperations(opts) {
      this.options = opts;
    }

    CircleCloserOperations.prototype.target = function() {
      return this.options.target || this.options.circle_closer;
    };

    CircleCloserOperations.prototype.open = function(amount) {
      if (amount === void 0) {
        amount = this.target()._closerWidth();
      }
      this.target().polygon1.translation.set(0, amount / 2);
      return this.target().polygon2.translation.set(0, -amount / 2);
    };

    CircleCloserOperations.prototype.shutter = function(opts) {
      var _this = this;
      return new TWEEN.Tween(this.target().group).to({
        rotation: this.target().group.rotation + Math.random() * Math.PI * 2
      }, 750).easing(TWEEN.Easing.Exponential.InOut).start().onComplete(function() {
        _this.target().group.rotation = Math.random() * Math.PI * 2;
        return new TWEEN.Tween(_this.target().group).to({
          rotation: _this.target().group.rotation + Math.random() * Math.PI * 2
        }, 750).easing(TWEEN.Easing.Exponential.InOut).delay(500).start();
      }).onStart(function() {
        new TWEEN.Tween(_this.target().polygon1.translation).to({
          y: -1
        }, 750).easing(TWEEN.Easing.Exponential.InOut).start().onComplete(function() {
          return new TWEEN.Tween(_this.target().polygon1.translation).to({
            y: 2000
          }, 750).easing(TWEEN.Easing.Exponential.InOut).delay(500).start();
        });
        return new TWEEN.Tween(_this.target().polygon2.translation).to({
          y: 1
        }, 750).easing(TWEEN.Easing.Exponential.InOut).start().onComplete(function() {
          return new TWEEN.Tween(_this.target().polygon2.translation).to({
            y: -2000
          }, 750).easing(TWEEN.Easing.Exponential.InOut).delay(500).start();
        });
      });
    };

    return CircleCloserOperations;

  })();

}).call(this);
