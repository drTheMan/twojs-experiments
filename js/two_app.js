// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.AppUi = (function(_super) {
    __extends(AppUi, _super);

    function AppUi(_opts) {
      this.options = _opts;
      this._initGui();
    }

    AppUi.prototype._initGui = function() {
      var folder,
        _this = this;
      this.gui = new dat.GUI();
      folder = this.gui.addFolder('Elements');
      folder.add({
        Stripes: function() {
          return _this.trigger('toggleStripes');
        }
      }, 'Stripes');
      folder.add({
        Circles: function() {
          return _this.trigger('toggleCircles');
        }
      }, 'Circles');
      folder.add({
        Rings: function() {
          return _this.trigger('toggleRings');
        }
      }, 'Rings');
      folder.add({
        Arrows: function() {
          return _this.trigger('toggleArrows');
        }
      }, 'Arrows');
      folder.add({
        TriGrid: function() {
          return _this.trigger('toggleTriGrid');
        }
      }, 'TriGrid');
      folder.add({
        BrokenSquares: function() {
          return _this.trigger('toggleBrokenSquares');
        }
      }, 'BrokenSquares');
      folder.add({
        Letterbox: function() {
          return _this.trigger('toggleLetterbox');
        }
      }, 'Letterbox');
      folder.open();
      folder = this.gui.addFolder('Actions');
      folder.add({
        Shaker: function() {
          return _this.trigger('shake');
        }
      }, 'Shaker');
      folder.add({
        Shutter: function() {
          return _this.trigger('shutter');
        }
      }, 'Shutter');
      folder.add({
        Arrows: function() {
          return _this.trigger('arrows');
        }
      }, 'Arrows');
      folder.add({
        Rings: function() {
          return _this.trigger('scale');
        }
      }, 'Rings');
      folder.add({
        Traveler: function() {
          return _this.trigger('traveler');
        }
      }, 'Traveler');
      folder.add({
        BreakSquares: function() {
          return _this.trigger('breaksquares');
        }
      }, 'BreakSquares');
      return folder.open();
    };

    return AppUi;

  })(Backbone.Model);

  this.TwoApp = (function() {
    function TwoApp(_opts) {
      this._mouseMove = __bind(this._mouseMove, this);
      this._keyDown = __bind(this._keyDown, this);
      this.options = _opts;
      this.init();
    }

    TwoApp.prototype.init = function() {
      this.two = new Two({
        autostart: true,
        fullscreen: true,
        type: Two.Types.svg
      }).appendTo(document.body);
      $(window).on('resize', this._resize).on('keydown', this._keyDown).mousemove(this._mouseMove);
      this._initUI();
      this._initScene();
      return this._initOperations();
    };

    TwoApp.prototype._initUI = function() {
      var _this = this;
      this.app_ui = new AppUi();
      this.app_ui.on('toggleStripes', function() {
        return _this._toggleStripes();
      });
      this.app_ui.on('toggleCircles', function() {
        return _this._toggleCircles();
      });
      this.app_ui.on('toggleRings', function() {
        return _this._toggleRingers();
      });
      this.app_ui.on('toggleArrows', function() {
        return _this._toggleArrows();
      });
      this.app_ui.on('toggleTriGrid', function() {
        return _this._toggleTriGrid();
      });
      this.app_ui.on('toggleLetterbox', function() {
        return _this._toggleLetterbox();
      });
      this.app_ui.on('toggleLetterbox', function() {
        return _this._toggleBrokenSquares();
      });
      this.app_ui.on('shutter', function() {
        if (_this.circle_closer_operations) {
          return _this.circle_closer_operations.shutter();
        }
      });
      this.app_ui.on('arrows', function() {
        if (_this.arrows_operations) {
          return _this.arrows_operations.move_out({
            spirality: 200
          });
        }
      });
      this.app_ui.on('scale', function() {
        if (_this.ringer_operations) {
          return _this.ringer_operations.scale();
        }
      });
      return this.app_ui.on('traveler', function() {
        if (_this._triGridOps) {
          return _this._triGridOps.lonelyTravelerTween().start();
        }
      });
    };

    TwoApp.prototype._initScene = function() {
      this._initBG();
      this._toggleBrokenSquares();
      this._toggleLetterbox();
      return this.two.bind('update', function() {
        return TWEEN.update();
      });
    };

    TwoApp.prototype._initBG = function() {
      var bg;
      bg = this.two.makeRectangle(this.two.width / 2, this.two.height / 2, this.two.width, this.two.height);
      bg.fill = '#000000';
      bg.noStroke();
      return this.two.add(bg);
    };

    TwoApp.prototype._toggleStripes = function() {
      var _this = this;
      if (this._stripeRains) {
        _.each(this._stripeRains, function(stripeRain) {
          return stripeRain.destroy();
        });
        this._stripeRains = void 0;
        return;
      }
      this._stripeRains = [
        new StripeRain({
          two: this.two,
          translation: new Two.Vector(-this.two.width / 2, 0),
          fatness: 15,
          rotation: -0.3,
          shadowOffset: 22,
          startAmount: 10
        }), new StripeRain({
          two: this.two,
          translation: new Two.Vector(this.two.width / 2, 0),
          rotation: 0.3 + Math.PI,
          shadowOffset: -22,
          startAmount: 10
        })
      ];
      return this.app_ui.on('shake', function() {
        var all_particles;
        all_particles = _.flatten(_.map(_this._stripeRains, function(stripe) {
          return stripe.getAllParticles();
        }));
        return _this.operations.add(new WiggleOperation({
          particles: all_particles,
          strength: 10 + Math.random() * 10
        }));
      });
    };

    TwoApp.prototype._toggleCircles = function() {
      if (this.circle_closer) {
        this.circle_closer.destroy();
        this.permanent_circle.destroy();
        this.circle_closer = this.permanent_circle = this.circle_closer_operations = this.permanent_circle_operations = void 0;
        return;
      }
      this.circle_closer = new CircleCloser({
        two: this.two,
        color: '#F3CB5A',
        radius: 200
      });
      this.circle_closer_operations = new CircleCloserOperations({
        target: this.circle_closer
      });
      this.circle_closer_operations.open();
      this.permanent_circle = new CircleCloser({
        two: this.two,
        radius: _.min([this.two.width, this.two.height]) * 0.6
      });
      this.permanent_circle_operations = new CircleCloserOperations({
        target: this.permanent_circle
      });
      return this.permanent_circle_operations.open(-1);
    };

    TwoApp.prototype._toggleRingers = function() {
      var minRadius;
      if (this.ringer) {
        this.ringer.destroy();
        this.ringer = this.ringer_operations = void 0;
        return;
      }
      minRadius = _.min([this.two.width, this.two.height]) * 0.6 + 10;
      this.ringer = new Ringer({
        two: this.two,
        minRadius: minRadius,
        maxRadius: minRadius + 400,
        minThickness: 30,
        maxThickness: 100
      });
      this.ringer_operations = new RingerOperations({
        target: this.ringer
      });
      return this.ringer_operations.rotate();
    };

    TwoApp.prototype._toggleArrows = function() {
      if (this.arrows) {
        this.arrows.destroy();
        this.arrows = this.arrows_operations = void 0;
        return;
      }
      this.arrows = new Arrows({
        two: this.two
      });
      this.arrows_operations = new ArrowsOperations({
        target: this.arrows
      });
      return this.arrows_operations.hide();
    };

    TwoApp.prototype._toggleTriGrid = function() {
      if (this._triGridOps) {
        this._triGridOps.target.destroy();
        this._triGridOps = void 0;
        return;
      }
      return this._triGridOps = new TriGridOps({
        two: this.two
      });
    };

    TwoApp.prototype._toggleBrokenSquares = function() {
      if (this.__brokenSquaresOps) {
        this.__brokenSquaresOps.destroy();
        this.__brokenSquaresOps = void 0;
        return;
      }
      return this.__brokenSquaresOps = new BrokenSquaresOps({
        two: this.two
      });
    };

    TwoApp.prototype._toggleLetterbox = function() {
      var bar, fatness;
      if (this.letterboxGroup) {
        this.two.remove(this.letterboxGroup);
        this.letterboxGroup = void 0;
        return;
      }
      fatness = this.two.height * 0.1;
      this.letterboxGroup = this.two.makeGroup();
      bar = this.two.makeRectangle(this.two.width / 2, fatness / 2, this.two.width, fatness);
      this.letterboxGroup.add(bar);
      bar = this.two.makeRectangle(this.two.width / 2, this.two.height - fatness / 2, this.two.width, fatness);
      this.letterboxGroup.add(bar);
      this.letterboxGroup.fill = '#000000';
      return this.letterboxGroup.noStroke();
    };

    TwoApp.prototype._initOperations = function() {
      var _this = this;
      this.operations = new Backbone.Collection([]);
      this.two.bind('update', function(frameCount) {
        return _this.operations.each(function(op) {
          return op.update();
        });
      });
      return this.operations.on('change:alive', function(op) {
        return _this.operations.remove(op);
      });
    };

    TwoApp.prototype._resize = function() {
      if (!this.two) {
        return;
      }
      this.two.renderer.setSize($(window).width(), $(window).height());
      this.two.width = this.two.renderer.width;
      return this.two.height = this.two.renderer.height;
    };

    TwoApp.prototype._keyDown = function(e) {
      var _ref;
      if (e.metaKey || e.ctrlKey) {
        return;
      }
      e.preventDefault();
      if (e.keyCode === 32) {
        this.running = (_ref = this.running === false) != null ? _ref : {
          "true": false
        };
        if (this.running) {
          this.two.play();
        } else {
          this.two.pause();
        }
      }
      if (e.keyCode === 67) {
        this.app_ui.trigger('shutter');
      }
      if (e.keyCode === 49) {
        this.app_ui.trigger('shake');
      }
      if (e.keyCode === 50) {
        this.app_ui.trigger('shutter');
      }
      if (e.keyCode === 51) {
        this.app_ui.trigger('arrows');
      }
      if (e.keyCode === 52) {
        return this.app_ui.trigger('scale');
      }
    };

    TwoApp.prototype._mouseMove = function(event) {
      var all_particles, v;
      if (this.lastMouseX && this.lastMouseY && this.operations.length < 20) {
        v = new Two.Vector(event.pageX - this.lastMouseX, event.pageY - this.lastMouseY);
        all_particles = _.flatten(_.map(this._stripesRains, function(stripe) {
          return stripe.getAllParticles();
        }));
        this.operations.add(new WiggleOperation({
          particles: all_particles,
          strength: v.length() * 0.03
        }));
      }
      this.lastMouseX = event.pageX;
      return this.lastMouseY = event.pageY;
    };

    return TwoApp;

  })();

}).call(this);
