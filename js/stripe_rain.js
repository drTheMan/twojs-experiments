// Generated by CoffeeScript 1.6.3
(function() {
  var Stripe, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Stripe = (function(_super) {
    __extends(Stripe, _super);

    function Stripe() {
      _ref = Stripe.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Stripe.prototype.isDead = function() {
      return this.get('particle').translation.y > this.get('height') * 1.6;
    };

    Stripe.prototype.update = function() {
      return this.get('particle').translation.addSelf(new Two.Vector(0, 30));
    };

    return Stripe;

  })(Backbone.Model);

  this.StripeRain = (function() {
    function StripeRain(_opts) {
      var _base;
      this.options = _opts;
      this.two = this.options.two;
      (_base = this.options).rotation || (_base.rotation = 0);
      this._init();
    }

    StripeRain.prototype.addOne = function() {
      return this.stripes.add(new Stripe({
        height: this.two.height + Math.random() * 500
      }));
    };

    StripeRain.prototype.addSome = function() {
      if (this.stripes.length < 50) {
        this.addOne();
        return this.addOne();
      }
    };

    StripeRain.prototype._init = function() {
      var _this = this;
      this.stripes = new Backbone.Collection([]);
      this.stripes.on('add', this._added, this);
      this.stripes.on('remove', this.addSome, this);
      this.stripes.on('remove', function(stripe) {
        return _this.group.remove(stripe.get('particle'));
      });
      this.two.bind('update', this._update, this);
      this.group = this.two.makeGroup();
      this.group.rotation = this.options.rotation;
      return this.addOne();
    };

    StripeRain.prototype._update = function(frameCount) {
      var _this = this;
      return this.stripes.each(function(obj) {
        if (obj.isDead()) {
          return _this.stripes.remove(obj);
        } else {
          return obj.update();
        }
      });
    };

    StripeRain.prototype._added = function(obj) {
      var height, rect;
      height = obj.get('height');
      rect = this.two.makeRectangle(Math.random() * this.two.width, -height, 20 + Math.random() * 30, height);
      rect.noStroke();
      rect.fill = this.options.color || '#000000';
      rect.addTo(this.group);
      return obj.set({
        particle: rect
      });
    };

    return StripeRain;

  })();

}).call(this);
