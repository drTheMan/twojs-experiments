// Generated by CoffeeScript 1.6.3
(function() {
  var BrokenSquare, BrokenSquareRow, BrokenSquares,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.BrokenSquaresOps = (function(_super) {
    __extends(BrokenSquaresOps, _super);

    function BrokenSquaresOps(_opts) {
      this.options = _opts;
      this.init();
    }

    BrokenSquaresOps.prototype.init = function() {
      this.destroy();
      this.target = this.options.target || this.options.brokenSquares || this.options.broken_squares || new BrokenSquares({
        two: this.options.two
      });
      this.two = this.target.two;
      this.target.on('destroy', (function() {
        return this.destroy();
      }), this);
      this.on('scrollTweenComplete', (function() {
        return this.pickNextScrollTween().start();
      }), this);
      return this.on('scrollTweenUpdate', (function(i) {
        if (i > 0.9) {
          return this.prepareNextScrollTween();
        }
      }), this);
    };

    BrokenSquaresOps.prototype.destroy = function() {
      return this.target = this.two = void 0;
    };

    BrokenSquaresOps.prototype.randomBreak = function(likeliness, broken_squares) {
      return _.each(broken_squares || this.target.broken_squares(), function(broken_square) {
        return _.each(broken_square.triangles, function(triangle) {
          if (Math.random() > (likeliness || 0.4)) {
            return triangle.opacity = 0.0;
          } else {
            return triangle.opacity = 1.0;
          }
        });
      });
    };

    BrokenSquaresOps.prototype.prepareNextScrollTween = function() {
      return this._nextScrollTween || (this._nextScrollTween = this.scrollTween());
    };

    BrokenSquaresOps.prototype.pickNextScrollTween = function() {
      var result;
      result = this.prepareNextScrollTween();
      this._nextScrollTween = void 0;
      return result;
    };

    BrokenSquaresOps.prototype.scrollTween = function() {
      var height, row, tween,
        _this = this;
      height = this.target.rowH();
      row = new BrokenSquareRow({
        two: this.target.two,
        size: this.target.size()
      });
      row.group.translation.set(0, this.target.rows.length * this.target.rowH());
      this.target.rows.push(row);
      this.randomBreak(0.4, row.broken_squares);
      row.group.addTo(this.target.group);
      tween = new TWEEN.Tween(this.target.group.translation).to({
        y: this.target.group.translation.y - height
      }, 800).easing(TWEEN.Easing.Linear.None);
      tween.onComplete(function() {
        return _this.trigger('scrollTweenComplete');
      });
      tween.onStart(function() {
        return _this.trigger('scrollTweenStart');
      });
      tween.onUpdate(function(i) {
        return _this.trigger('scrollTweenUpdate', i);
      });
      return tween;
    };

    return BrokenSquaresOps;

  })(Backbone.Model);

  BrokenSquares = (function(_super) {
    __extends(BrokenSquares, _super);

    function BrokenSquares(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.init();
    }

    BrokenSquares.prototype.init = function() {
      this.destroy();
      this.group = this.two.makeGroup();
      return this.addBrokenSquareRows(this._createBrokenSquareRows());
    };

    BrokenSquares.prototype.destroy = function() {
      this.trigger('destroy', this);
      if (this.rows) {
        _.each(this.rows, function(row) {
          return row.destroy();
        });
        this.rows = void 0;
      }
      if (this.group) {
        this.two.remove(this.group);
        return this.group = void 0;
      }
    };

    BrokenSquares.prototype.size = function() {
      return this.options.size || 50;
    };

    BrokenSquares.prototype.colSpacing = function() {
      return this.options.colSpacing || 30;
    };

    BrokenSquares.prototype.rowSpacing = function() {
      return this.options.rowSpacing || 30;
    };

    BrokenSquares.prototype.colW = function() {
      return this.size() + this.colSpacing();
    };

    BrokenSquares.prototype.rowH = function() {
      return this.size() + this.rowSpacing();
    };

    BrokenSquares.prototype.gridW = function() {
      return this.two.width / this.colW() + 1;
    };

    BrokenSquares.prototype.gridH = function() {
      return this.two.height / this.rowH() + 1;
    };

    BrokenSquares.prototype.broken_squares = function() {
      return _.flatten(_.map(this.rows || [], function(row) {
        return row.broken_squares;
      }));
    };

    BrokenSquares.prototype.addBrokenSquareRows = function(rows) {
      var _this = this;
      this.rows || (this.rows = []);
      this.rows = _.union(this.rows, rows);
      return _.each(rows, function(rows) {
        return rows.group.addTo(_this.group);
      });
    };

    BrokenSquares.prototype._createBrokenSquareRows = function() {
      var result,
        _this = this;
      return result = _.map(_.range(this.gridH()), function(y, idx, list) {
        var row;
        row = new BrokenSquareRow({
          two: _this.two,
          size: _this.size()
        });
        row.group.translation.set(0, y * _this.rowH());
        return row;
      });
    };

    return BrokenSquares;

  })(Backbone.Model);

  BrokenSquare = (function(_super) {
    __extends(BrokenSquare, _super);

    function BrokenSquare(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.init();
    }

    BrokenSquare.prototype.init = function() {
      var _this = this;
      this.destroy();
      this.group = this.two.makeGroup();
      this.triangles = this._createTriangles();
      _.each(this.triangles, function(triangle) {
        return triangle.addTo(_this.group);
      });
      this.group.fill = '#FFFFFF';
      return this.group.noStroke();
    };

    BrokenSquare.prototype.destroy = function() {
      var _this = this;
      this.trigger('destroy');
      if (this.triangles) {
        _.each(this.triangles, function(triangle) {
          return _this.two.remove(triangle);
        });
        this.triangles = void 0;
      }
      if (this.group) {
        this.two.remove(this.group);
        return this.group = void 0;
      }
    };

    BrokenSquare.prototype.width = function() {
      return this.options.width || this.options.size || 50;
    };

    BrokenSquare.prototype.height = function() {
      return this.options.height || this.options.size || 50;
    };

    BrokenSquare.prototype.coords = function() {
      return [new Two.Anchor(0, 0), new Two.Anchor(this.width() / 2, 0), new Two.Anchor(this.width(), 0), new Two.Anchor(0, this.height() / 2), new Two.Anchor(this.width() / 2, this.height() / 2), new Two.Anchor(this.width(), this.height() / 2), new Two.Anchor(0, this.height()), new Two.Anchor(this.width() / 2, this.height()), new Two.Anchor(this.width(), this.height())];
    };

    BrokenSquare.prototype._createTriangles = function() {
      var coords;
      coords = this.coords();
      return [new Two.Polygon([coords[0], coords[4], coords[3]], false, false), new Two.Polygon([coords[0], coords[1], coords[4]], false, false), new Two.Polygon([coords[1], coords[2], coords[4]], false, false), new Two.Polygon([coords[2], coords[4], coords[5]], false, false), new Two.Polygon([coords[3], coords[4], coords[6]], false, false), new Two.Polygon([coords[4], coords[6], coords[7]], false, false), new Two.Polygon([coords[4], coords[7], coords[8]], false, false), new Two.Polygon([coords[4], coords[5], coords[8]], false, false)];
    };

    return BrokenSquare;

  })(Backbone.Model);

  BrokenSquareRow = (function(_super) {
    __extends(BrokenSquareRow, _super);

    function BrokenSquareRow(_opts) {
      this.options = _opts;
      this.two = _opts.two;
      this.init();
    }

    BrokenSquareRow.prototype.init = function() {
      var _this = this;
      this.destroy();
      this.group = this.two.makeGroup();
      this.broken_squares = this._create();
      _.each(this.broken_squares, function(broken_square) {
        return broken_square.group.addTo(_this.group);
      });
      this.group.fill = '#FFFFFF';
      return this.group.noStroke();
    };

    BrokenSquareRow.prototype.destroy = function() {
      var _this = this;
      this.trigger('destroy');
      if (this.broken_squares) {
        _.each(this.broken_squares, function(broken_square) {
          return broken_square.destroy();
        });
        this.broken_squares = void 0;
      }
      if (this.group) {
        this.two.remove(this.group);
        return this.group = void 0;
      }
    };

    BrokenSquareRow.prototype.size = function() {
      return this.options.size || 50;
    };

    BrokenSquareRow.prototype.colSpacing = function() {
      return this.options.colSpacing || 30;
    };

    BrokenSquareRow.prototype.rowSpacing = function() {
      return this.options.rowSpacing || 30;
    };

    BrokenSquareRow.prototype.colW = function() {
      return this.size() + this.colSpacing();
    };

    BrokenSquareRow.prototype.rowH = function() {
      return this.size() + this.rowSpacing();
    };

    BrokenSquareRow.prototype.gridW = function() {
      return this.two.width / this.colW() + 1;
    };

    BrokenSquareRow.prototype.gridH = function() {
      return this.two.height / this.rowH() + 1;
    };

    BrokenSquareRow.prototype._create = function() {
      var _this = this;
      return _.map(_.range(this.gridW()), function(x) {
        var bSquare;
        bSquare = new BrokenSquare({
          two: _this.two,
          size: _this.size()
        });
        bSquare.group.translation.set(x * _this.colW(), 0);
        return bSquare;
      });
    };

    return BrokenSquareRow;

  })(Backbone.Model);

}).call(this);
